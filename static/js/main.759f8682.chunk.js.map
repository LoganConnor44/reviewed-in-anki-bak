{"version":3,"sources":["Panel.tsx","entities/DatabaseContext.ts","AddToHomeScreenPrompt.jsx","InstallPwa.jsx","App.tsx","serviceWorker.js","index.js"],"names":["randomizer","things","Math","floor","length","random","setDelayMilliSeconds","delay","Panel","word","purpose","cardText","panelId","isLoading","sharedStyles","backgroundColor","animationStyles","isALoadingPanel","panelType","animationDirections","animationDelayMilliseconds","name","css","left","right","top","bottom","firstAnimeName","animationDelay","position","WebkitAnimationName","WebkitAnimationDuration","animationSeconds","WebkitAnimationTimingFunction","WebkitAnimationDelay","WebkitAnimationIterationCount","WebkitAnimationDirection","animationDirection","WebkitAnimationFillMode","animationFillMode","animationName","animationDuration","animationTimingFunction","animationIterationCount","getAnimationStyles","cellStyles","width","height","trendStyles","font","fontSize","letterSpacing","color","textShadow","textDecoration","content","charAt","toUpperCase","slice","hideCursor","typingDelayMilliseconds","id","style","startDelay","cursor","blink","hideWhenDone","hideWhenDoneDelay","ReviewedDb","reviews","preferences","version","stores","table","Dexie","AddToHomescreenPrompt","database","useState","prompt","setPrompt","initializePreferencesIfNecessary","count","put","username","promptUserForInstallation","useEffect","then","ready","event","preventDefault","window","addEventListener","removeEventListener","Promise","reject","Error","InstallPwa","promptToInstall","isAddToHomescreenVisible","setIsAddToHomescreenVisible","setPromptUserForInstallation","hideAddToHomescreen","doNotPromptAgain","toArray","results","update","console","log","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","SnackbarContent","message","display","alignItems","marginRight","action","IconButton","key","aria-label","onClick","App","indexedDb","panels","setPanels","retrieveDataFromAnkiApi","numberOfItemsInIndexedDb","a","trends","cardsReviewedQuery","axios","post","x","data","result","processCardsReviewed","cardsReviewed","detailOfCardsReviewed","y","processDetailedCardsReviewed","detailsOfCardsReviewed","forEach","z","fields","Hanzi","push","value","ankiData","indexedDbResults","map","createdTimestamp","Date","now","displayContent","clear","bulkAdd","tempPanels","index","getAnkiData","loadingPanel","hidden","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.759f8682.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport './index.css';\nimport Typist from 'react-typist';\nimport 'react-typist/dist/Typist.css';\n\nconst randomizer = (things: any): any => things[Math.floor(things.length * Math.random())];\nconst setDelayMilliSeconds = (delay: number): number =>  delay * 5000;\n\nconst getAnimationStyles = (isALoadingPanel: boolean, delay: number): React.CSSProperties => {\n\tlet animationStyles: React.CSSProperties = {};\n\tconst positions: string[] = [\n\t\t'horizontal',\n\t\t'vertical'\n\t];\n\tconst panelType: string = randomizer(positions);\n\tlet animationDirections: object[] = [];\n\tconst animationDelayMilliseconds: number = setDelayMilliSeconds(delay);\n\tconst animationSeconds: number = 500;\n\t\n\tif (panelType === 'horizontal') {\n\t\tconst leftToRight: object = {\n\t\t\tname: 'slide-left-to-center',\n\t\t\tcss: {\n\t\t\t\tleft: '-100%'\n\t\t\t}\n\t\t};\n\t\tconst rightToLeft: object = {\n\t\t\tname: 'slide-right-to-center',\n\t\t\tcss: {\n\t\t\t\tright: '-100%'\n\t\t\t}\n\t\t};\n\t\tanimationDirections = [\n\t\t\tleftToRight,\n\t\t\trightToLeft\n\t\t];\n\t}\n\tif (panelType === 'vertical') {\n\t\tconst topToBottom: object = {\n\t\t\tname: 'slide-top-to-center',\n\t\t\tcss: {\n\t\t\t\ttop: '-100%'\n\t\t\t}\n\t\t};\n\t\tconst bottomToTop: object = {\n\t\t\tname: 'slide-bottom-to-center',\n\t\t\tcss: {\n\t\t\t\tbottom: '-100%'\n\t\t\t}\n\t\t};\n\t\tanimationDirections = [\n\t\t\ttopToBottom,\n\t\t\tbottomToTop\n\t\t];\n\t}\n\t\n\tif (!isALoadingPanel) {\n\t\tconst firstAnimeName: any = randomizer(animationDirections);\n\t\tconst animationDuration: string = animationSeconds + 'ms';\n\t\tconst animationTimingFunction: string = 'ease-out';\n\t\tconst animationDelay: string = animationDelayMilliseconds + 'ms';\n\t\tconst animationIterationCount: number = 1;\n\t\tconst animationDirection: string = 'normal';\n\t\tconst animationFillMode: string = 'forwards';\n\n\t\tanimationStyles = {\n\t\t\t...firstAnimeName.css,\n\t\t\t...{\n\t\t\t\tposition: 'absolute',\n\t\t\t\tWebkitAnimationName: firstAnimeName.name,\n\t\t\t\tWebkitAnimationDuration: animationDuration,\n\t\t\t\tWebkitAnimationTimingFunction: animationTimingFunction,\n\t\t\t\tWebkitAnimationDelay: animationDelay,\n\t\t\t\tWebkitAnimationIterationCount: animationIterationCount,\n\t\t\t\tWebkitAnimationDirection: animationDirection + ', ' + animationDirection,\n\t\t\t\tWebkitAnimationFillMode: animationFillMode + ', ' + animationFillMode,\n\t\t\t\tanimationName: firstAnimeName.name,\n\t\t\t\tanimationDuration: animationDuration,\n\t\t\t\tanimationTimingFunction: animationTimingFunction,\n\t\t\t\tanimationDelay: animationDelay,\n\t\t\t\tanimationIterationCount: animationIterationCount,\n\t\t\t\tanimationDirection: animationDirection,\n\t\t\t\tanimationFillMode: animationFillMode,\n\t\t\t}\n\t\t};\n\t}\n\treturn animationStyles;\n};\n\ntype PanelProps = {\n\tpurpose: string,\n\tdelay: number,\n\tcardText: string\n};\nconst Panel: FunctionComponent<PanelProps> = ({purpose, delay, cardText}) => {\n\tconst panelId: string = purpose + '-cell';\n\tconst colours: string[] = [\n\t\t'#ff3031',\n\t\t'#68ac0d',\n\t\t'#00a8da',\n\t\t'#fbc500'\n\t];\n\tconst isLoading: boolean = purpose === 'loading' ? true : false;\n\tconst sharedStyles: object = {\n\t\tbackgroundColor: randomizer(colours),\n\t\t\n\t};\n\tconst animationStyles: React.CSSProperties = getAnimationStyles(isLoading, delay);\n\tconst cellStyles: React.CSSProperties = {\n\t\t...sharedStyles,\n\t\t...animationStyles,\n\t\t...{\n\t\t\twidth: '100%',\n\t\t\theight: '100%'\n\t\t}\n\t};\n\tconst trendStyles: React.CSSProperties = {\n\t\t...sharedStyles,\n\t\t...{\n\t\t\ttop: '50%',\n\t\t\theight: '50%',\n\t\t\tposition: 'absolute',\n\t\t\tfont: \"bold 1em/1 'Helvetica Neue', Helvetica, Arial, sans-serif\",\n\t\t\tfontSize: '3em',\n\t\t\tletterSpacing: '-0.05em',\n\t\t\tcolor: '#fff',\n\t\t\ttextShadow: '0 0.1em 0 rgba(0, 0, 0, 0.1)',\n\t\t\ttextDecoration: 'none',\n\t\t\tleft: '0.5em',\n\t\t\tright: '0.5em'\n\t\t}\n\t};\n    const capitalizeFirstCharacter = (word: string): string => word.charAt(0).toUpperCase() + word.slice(1);\n    \n\tconst content: string = !isLoading ? cardText : capitalizeFirstCharacter(purpose) + '...';\n\tconst hideCursor: boolean = !isLoading;\n\tconst typingDelayMilliseconds: number = setDelayMilliSeconds(delay) + 500;\n\t\n\treturn (\n\t\t<div id={panelId} style={cellStyles} >\n\t\t\t<div style={trendStyles}>\n\t\t\t\t<Typist startDelay={typingDelayMilliseconds}\n\t\t\t\t\tcursor={{\n\t\t\t\t\t\tblink: true,\n\t\t\t\t\t\thideWhenDone: hideCursor,\n\t\t\t\t\t\thideWhenDoneDelay: 0\n\t\t\t\t\t}} >\n\t\t\t\t\t{content}\n\t\t\t\t</Typist>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Panel;","import Dexie from 'dexie';\nimport { IReview } from './IReview';\nimport { IPreference } from './IPreference';\n\nexport class ReviewedDb extends Dexie {\n    reviews: Dexie.Table<IReview, number>;\n    preferences: Dexie.Table<IPreference, number>;\n\n    constructor() {\n        super('ReviewedDb');\n        this.version(1).stores({\n            reviews: `++id`,\n            preferences: `++id`\n        });\n        this.reviews = this.table(\"reviews\");\n        this.preferences = this.table(\"preferences\");\n    }\n}","import { useState, useEffect } from 'react';\n\n/**\n * Prompts the user to install the application.\n */\nconst AddToHomescreenPrompt = (database) => {\n\n    /**\n     * @param { boolean } prompt This constant can change\n     * @param { isTrusted: boolean } prompt This constant can change\n     */\n    const [prompt, setPrompt] = useState(false);\n\n    /**\n     * An identical function exists within app-drawer.js\n     */\n    const promptToInstall = () => {\n        if (prompt) {\n            return prompt.prompt();\n        }\n        return Promise.reject(new Error('Tried installing before browser sent \"beforeinstallprompt\" event'));\n    };\n\n    const initializePreferencesIfNecessary = count => {\n        if (count === 0) {\n            const initialize = {\n                username: 'loganconnor44',\n                promptUserForInstallation: true\n            };\n            database.preferences.put(initialize);\n        }\n    };\n\n    useEffect(() => {\n        database.preferences.count().then(initializePreferencesIfNecessary);\n        \n        const ready = event => {\n            event.preventDefault();\n            setPrompt(event);\n        };\n        window.addEventListener(\"beforeinstallprompt\", ready);\n        return () => {\n            window.removeEventListener(\"beforeinstallprompt\", ready);\n        };\n    }, []);\n\n    return [prompt, promptToInstall];\n};\n\nexport default AddToHomescreenPrompt;","import React, { useState, useEffect } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport AddToHomescreenPrompt from './AddToHomeScreenPrompt';\n\n/**\n * React web component to install the WebApk or a web shortcut to the user's homescreen.\n */\nconst InstallPwa = ({database}) => {\n    const [prompt, promptToInstall] = AddToHomescreenPrompt(database);\n    const [isAddToHomescreenVisible, setIsAddToHomescreenVisible] = useState(false);\n    const [promptUserForInstallation, setPromptUserForInstallation] = useState(false);\n\n    const dismissAndStorePreference = event => {\n        hideAddToHomescreen();\n        doNotPromptAgain(event);\n    };\n\n    const hideAddToHomescreen = () => setIsAddToHomescreenVisible(false);\n\n    const installAndHideMessage = () => {\n        hideAddToHomescreen();\n        promptToInstall();\n    };\n\n    const doNotPromptAgain = event => {\n        event.preventDefault();\n        database.preferences.toArray().then(results => {\n            database.preferences.update(results[0].id, {promptUserForInstallation: false});\n        });\n    };\n    \n    database.preferences.toArray().then(results => {\n        if (results.length !== 0) {\n            setPromptUserForInstallation(results[0].promptUserForInstallation);\n        }\n    });\n    \n    useEffect(() => {\n        /**\n         * Determines if the prompt is false or anything else.\n         * Prompt may be an object such as { isTrusted: boolean }\n         */\n        const promptEventIsReady = () => prompt !== false ? prompt : false;\n        console.log(`inThe effect use`);\n\n        if (promptEventIsReady() && promptUserForInstallation) {\n            console.log(`in`);\n            setIsAddToHomescreenVisible(true);\n        }\n    }, [prompt, promptUserForInstallation]);\n\n    const message = \"Click here to download this app.\";\n\n    return ( \n        isAddToHomescreenVisible ?\n            <Snackbar anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                    \n                }}\n                open={isAddToHomescreenVisible}\n                autoHideDuration={3000} >\n                <SnackbarContent message={\n                    <div style={{\n                            display: 'flex',\n                            alignItems: 'center'\n                        }} >\n                        <InfoIcon style={{marginRight: 4}} />\n                    {message}\n                    </div>\n                    }\n                    style={{backgroundColor: '#43a047'}}\n                    action={\n                        <div>\n                            <IconButton key=\"download-and-dismiss\" aria-label=\"download-and-dismiss\" onClick={installAndHideMessage} >\n                                <GetAppIcon />\n                            </IconButton>\n                            <IconButton key=\"close\" aria-label=\"close\" onClick={dismissAndStorePreference} >\n                                <CloseIcon />\n                            </IconButton>\n                        </div>\n                    } />\n            </Snackbar>\n            :\n            <div></div>\n    );\n};\n\nexport default InstallPwa;","import React, { useState, Fragment, useEffect } from 'react';\nimport Panel from './Panel';\nimport axios from 'axios';\nimport { ReviewedDb } from './entities/DatabaseContext';\nimport { IReview } from './entities/IReview';\nimport InstallPwa from './InstallPwa';\n\nconst shuffle = (mixMeUp: JSX.Element[]): JSX.Element[] => {\n\tlet currentIndex: number = mixMeUp.length;\n\tlet temporaryValue: JSX.Element;\n\tlet randomIndex: number;\n\n\twhile (currentIndex !== 0) {\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\ttemporaryValue = mixMeUp[currentIndex];\n\t\tmixMeUp[currentIndex] = mixMeUp[randomIndex];\n\t\tmixMeUp[randomIndex] = temporaryValue;\n\t}\n\n\treturn mixMeUp;\n}\n\nconst App = () => {\n\tconst indexedDb: ReviewedDb = new ReviewedDb();\n\tconst [panels, setPanels] = useState<JSX.Element[]>([]);\n\tconst ankiApiUrl = 'https://192.168.1.4:8765';\n\n\tuseEffect(() => {\n\t\tconst retrieveDataFromAnkiApi = async (numberOfItemsInIndexedDb: number): Promise<string[]> => {\n\t\t\tconsole.log(`retrieveDataFromAnkiApi :: Starting function`);\n\t\t\tlet trends: string[] = [];\n\t\t\tconst cardsReviewedQuery: object = {\n\t\t\t\t\"action\": \"findNotes\",\n\t\t\t\t\"version\": 6,\n\t\t\t\t\"params\": {\n\t\t\t\t\t\"query\": \"rated:7\"\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await axios.post(ankiApiUrl, cardsReviewedQuery).then(x => {\n\t\t\t\tif (numberOfItemsInIndexedDb > 0 && numberOfItemsInIndexedDb === x.data.result.length) {\n\t\t\t\t\tconsole.log(`retrieveDataFromAnkiApi :: Exiting function :: Same records exist in IndexedDb`);\n\t\t\t\t\treturn ['same-records'];\n\t\t\t\t}\n\t\t\t\tif (numberOfItemsInIndexedDb === 0) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'No cards studied today.',\n\t\t\t\t\t\t'Nothing found.',\n\t\t\t\t\t\t'Perform a sync if you are expecting results.',\n\t\t\t\t\t\t'Looks like you\\'ve been lazy.'\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\tconsole.log(`retrieveDataFromAnkiApi :: Exiting function :: Proceed to processCardsReviewed`);\n\t\t\t\treturn processCardsReviewed(x, trends);\n\t\t\t});\n\t\t};\n\t\n\t\tconst processCardsReviewed = async (cardsReviewed: any, trends: string[]): Promise<string[]> => {\n\t\t\tconsole.log(`processCardsReviewed :: Starting function`);\n\t\t\tif (typeof cardsReviewed.data.result === 'undefined' || cardsReviewed.data.result.length === 0) {\n\t\t\t\tconsole.log(`processCardsReviewed :: Exiting function :: No cards returned`);\n\t\t\t\treturn trends;\n\t\t\t}\n\t\t\tconst detailOfCardsReviewed: object = {\n\t\t\t\t\"action\": \"notesInfo\",\n\t\t\t\t\"version\": 6,\n\t\t\t\t\"params\": {\n\t\t\t\t\t\"notes\": cardsReviewed.data.result\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await axios.post(ankiApiUrl, detailOfCardsReviewed).then(y => {\n\t\t\t\tconsole.log(`processCardsReviewed :: Exiting function :: Proceed to processDetailedCardsReviewed`);\n\t\t\t\treturn processDetailedCardsReviewed(y, trends);\n\t\t\t});\n\t\t}\n\t\n\t\tconst processDetailedCardsReviewed = async (detailsOfCardsReviewed: any, trends: string[]): Promise<string[]> => {\n\t\t\tconsole.log(`processDetailedCardsReviewed :: Starting function`);\n\t\t\tif (typeof detailsOfCardsReviewed.data.result !== 'undefined') {\n\t\t\t\tdetailsOfCardsReviewed.data.result.forEach( (z: any) => {\n\t\t\t\t\tif (typeof z.fields.Hanzi !== 'undefined') {\n\t\t\t\t\t\ttrends.push(z.fields.Hanzi.value);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof z.fields['Simplified Hanzi'] !== 'undefined') {\n\t\t\t\t\t\ttrends.push(z.fields['Simplified Hanzi'].value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (trends.length === 0) {\n\t\t\t\tconsole.log('No data returned.');\n\t\t\t\ttrends.push('No cards studied today.');\n\t\t\t\ttrends.push('Nothing found.');\n\t\t\t\ttrends.push('Perform a sync if you are expecting results.');\n\t\t\t\ttrends.push('Looks like you\\'ve been lazy.');\n\t\t\t}\n\t\t\tconsole.log(`processDetailedCardsReviewed :: Exiting function`);\n\t\t\treturn trends;\n\t\t};\n\t\tconst getAnkiData = async (): Promise<void> => {\n\t\t\tconsole.log(`getAnkiData :: Starting function`);\n\t\t\tlet tempPanels: JSX.Element[];\n\t\t\tlet ankiData: string[] = [];\n\t\t\tlet reviews: IReview[];\n\t\t\tlet indexedDbResults: IReview[] = await indexedDb.reviews.toArray();\n\t\t\tankiData = await retrieveDataFromAnkiApi(indexedDbResults.length);\n\t\t\t\n\t\t\tif (ankiData[0] !== 'same-records') {\n\t\t\t\treviews = ankiData.map(x => {\n\t\t\t\t\tlet review: IReview = {\n\t\t\t\t\t\tcreatedTimestamp: Date.now(),\n\t\t\t\t\t\tdisplayContent: x\n\t\t\t\t\t};\n\t\t\t\t\treturn review;\n\t\t\t\t});\n\t\t\t\tindexedDb.reviews.clear();\n\t\t\t\tindexedDb.reviews.bulkAdd(reviews);\n\t\t\t\ttempPanels = reviews.map((value, index) => <Panel key={index} purpose='content' delay={index} cardText={value.displayContent}/>);\n\t\t\t} else {\n\t\t\t\ttempPanels = indexedDbResults.map((value, index) => <Panel key={value.id} purpose='content' delay={index} cardText={value.displayContent}/>);\n\t\t\t}\n\t\t\t\n\t\t\tsetPanels(tempPanels);\n\t\t\tconsole.log(`getAnkiData :: Exiting function`);\n\t\t};\n\t\tgetAnkiData();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst loadingPanel: JSX.Element = <Panel key={99999} purpose='loading' delay={0} cardText={''}/>\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<InstallPwa database={indexedDb} />\n\t\t\t{loadingPanel}\n\t\t\t{ panels.length < 1 ? <div hidden></div> : panels.map(x => x) }\n\t\t</Fragment>\n\t);\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}