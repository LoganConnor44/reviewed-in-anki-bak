{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["trends","previousFiveTrends","axios","post","then","x","console","log","detailOfCardsReviewed","data","result","y","includes","forEach","z","fields","Hanzi","push","value","length","colors","randomizer","things","Math","floor","random","container","document","getElementById","slideEase","t","delay","Cell","node","createElement","className","style","left","top","right","bottom","this","panes","Pane","appendChild","setNextNode","currentPane","nextPane","zIndex","init","quickStart","cell","nextNode","next","slideStart","slideValue","trend","backgroundColor","randomTrend","unshift","pop","title","href","innerHTML","slideIn","setTimeout","nextChar","slice","cells","i","calcFontsize","fontSize","min","clientHeight","clientWidth","window","onresize","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7f1e9bf0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nlet trends = ['Loading...'];\nlet previousFiveTrends = [];\nlet cardsReviewedQuery = {\n    \"action\": \"findNotes\",\n    \"version\": 6,\n    \"params\": {\n        \"query\": \"rated:7\"\n    }\n};\naxios.post('api', cardsReviewedQuery)\n\t.then(x => {\n\t\tconsole.log('Request successful. Iterating through returned data for details.');\n\t\tlet detailOfCardsReviewed = {\n\t\t\t\"action\": \"notesInfo\",\n\t\t\t\"version\": 6,\n\t\t\t\"params\": {\n\t\t\t\t\"notes\": x.data.result\n\t\t\t}\n\t\t};\n\t\taxios.post('/api', detailOfCardsReviewed)\n\t\t\t.then(y => {\n\t\t\t\tconsole.log('Request successful. Determining which fields to retrieve data from.');\n\t\t\t\tif (trends.includes('Loading...')) {\n\t\t\t\t\ttrends = [];\n\t\t\t\t}\n\t\t\t\tif (typeof y.data.result !== 'undefined') {\n\t\t\t\t\ty.data.result.forEach(z => {\n\t\t\t\t\t\tif (typeof z.fields.Hanzi !== 'undefined') {\n\t\t\t\t\t\t\ttrends.push(z.fields.Hanzi.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof z.fields['Simplified Hanzi'] !== 'undefined') {\n\t\t\t\t\t\t\ttrends.push(z.fields['Simplified Hanzi'].value);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (trends.length === 0) {\n\t\t\t\t\tconsole.log('No data returned.');\n\t\t\t\t\ttrends.push('No cards studied today.');\n\t\t\t\t\ttrends.push('Nothing found.');\n\t\t\t\t\ttrends.push('Perform a sync if you are expecting results.');\n\t\t\t\t\ttrends.push('Looks like you\\'ve been lazy.');\n\t\t\t\t}\n\t\t\t});\n\t});\n\nvar colors = [\n\t'#ff3031',\n\t'#68ac0d',\n\t'#00a8da',\n\t'#fbc500'\n];\n\nconst randomizer = things => things[Math.floor(things.length * Math.random())];\nlet container = document.getElementById('root')\n\n// slide options\nconst slideEase = t => t * t * t;\nconst slideDuration = 1000;\n\n// text options\nconst delay = {\n\tbefore: 300,\n\tbetween: 200,\n\tafter: 2500\n};\n\nfunction Cell() {\n\t// create the node\n\tvar node = document.createElement('div');\n\tnode.className = 'cell';\n\tnode.style.left = 0;\n\tnode.style.top = 0;\n\tnode.style.right = 0;\n\tnode.style.bottom = 0;\n\tthis.node = node;\n\n\t// create and add the panes\n\tvar panes = [new Pane(this), new Pane(this)];\n\tnode.appendChild(panes[0].node);\n\tnode.appendChild(panes[1].node);\n\tpanes[0].setNextNode(panes[1].node);\n\tpanes[1].setNextNode(panes[0].node);\n\n\t// handles sliding in next pane\n\tvar currentPane = 0;\n\tthis.nextPane = function () {\n\t\t// swap z-indexes\n\t\tpanes[currentPane].node.style.zIndex = '-1';\n\t\tcurrentPane = ++currentPane % 2;\n\t\tpanes[currentPane].node.style.zIndex = '1';\n\n\t\tpanes[currentPane].init();\n\t}\n\n\t// quickstart\n\tpanes[0].quickStart();\n\tpanes[0].node.style.zIndex = '1';\n};\n\n\n\n\nfunction Pane(cell) {\n\tvar nextNode;\n\tthis.setNextNode = next => nextNode = next;\n\n\t// create the node\n\tvar node = document.createElement('div');\n\tnode.className = 'pane';\n\tthis.node = node;\n\n\t// a place to write the trends\n\tvar trend = document.createElement('a');\n\ttrend.className = 'trend';\n\tnode.appendChild(trend);\n\n\t// (re-)initialize pane when sliding in\n\tthis.init = function () {\n\t\tvar dir = Math.floor(4 * Math.random());\n\t\tswitch (dir) {\n\t\t\tcase 0:\n\t\t\t\tslideStart = { left: 0, top: -100 };\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tslideStart = { left: 100, top: 0 };\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tslideStart = { left: 0, top: 100 };\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tslideStart = { left: -100, top: 0 };\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t// make sure it's a different background color\n\t\tdo\n\t\t\tnode.style.backgroundColor = randomizer(colors);\n\t\twhile (node.style.backgroundColor === nextNode.style.backgroundColor);\n\n\t\tvar randomTrend = randomizer(trends);\n\t\t\n\t\tif (trends.length > 1) {\n\t\t\tdo {\n\t\t\t\trandomTrend = randomizer(trends);\t\t\t\n\t\t\t} while (previousFiveTrends.includes(randomTrend))\n\t\t\tpreviousFiveTrends.unshift(randomTrend);\n\t\t\tif (previousFiveTrends.length > 5) {\n\t\t\t\tpreviousFiveTrends.pop();\n\t\t\t}\n\t\t\tconsole.log('Previous Five Trends');\n\t\t\tconsole.log(previousFiveTrends);\n\t\t}\n\n\t\ttrend.title = randomTrend;\n\t\ttrend.href = 'https://www.google.com/search?q=' + trend.title;\n\t\ttrend.innerHTML = '';\n\n\t\t// start sliding in\n\t\tslideValue = 0;\n\t\tslideIn();\n\t}\n\n\t// handles sliding in\n\tvar slideStart,\n\t\tslideValue;\n\tvar slideIn = function () {\n\t\tslideValue += 20 / slideDuration;\n\t\tif (slideValue >= 1) {\n\t\t\t// end of sliding in\n\t\t\tslideValue = 1;\n\t\t\tsetTimeout(nextChar, delay.before);\n\t\t} else {\n\t\t\tsetTimeout(slideIn, 20);\n\t\t}\n\t\tnode.style.left = slideEase(1 - slideValue) * slideStart.left + '%';\n\t\tnode.style.top = slideEase(1 - slideValue) * slideStart.top + '%';\n\t\t// push other node away\n\t\tnextNode.style.left =\n\t\t\t(slideEase(1 - slideValue) - 1) * slideStart.left + '%';\n\t\tnextNode.style.top =\n\t\t\t(slideEase(1 - slideValue) - 1) * slideStart.top + '%';\n\t}\n\n\t// handles text\n\tvar nextChar = function () {\n\t\tif (trend.innerHTML.length < trend.title.length) {\n\t\t\ttrend.innerHTML =\n\t\t\t\ttrend.title.slice(0, trend.innerHTML.length + 1);\n\t\t\tsetTimeout(nextChar, delay.between);\n\t\t} else {\n\t\t\tsetTimeout(cell.nextPane, delay.after);\n\t\t}\n\t}\n\n\t// initial start\n\tthis.quickStart = function () {\n\t\tnode.style.backgroundColor = colors[3];\n\t\ttrend.title = randomizer(trends);\n\t\ttrend.href = 'https://www.google.com/search?q=' + trend.title;\n\t\tnextChar();\n\t}\n};\n\n\n// create the cells\nlet cells = [];\nfor (var i = 0; i < 1; i++) {\n\tcells[i] = new Cell();\n\tcontainer.appendChild(cells[i].node);\n}\n\n// handles font size on resize\n// quick and dirty, needs a fix\nconst calcFontsize = () => {\n\tlet fontSize = Math.min(\n\t\tcontainer.clientHeight / 2,\n\t\tcontainer.clientWidth / 10\n\t);\n\tfontSize = Math.floor(fontSize);\n\tcontainer.style.fontSize = fontSize + 'px';\n}\ncalcFontsize();\nwindow.onresize = calcFontsize;\n\nconst App = () => {\n\treturn (<div />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}